const sql = require('mssql');

const config = {
    server: 'localhost',
    database: 'HTBIEUQUYET_V6',
    options: {
        encrypt: false,
        trustServerCertificate: true,
        integratedSecurity: true
    }
};

async function createTestData() {
    try {
        console.log('üîÑ Connecting to database...');
        const pool = new sql.ConnectionPool(config);
        await pool.connect();
        
        const request = pool.request();
        
        // T·∫°o phi·∫øu bi·ªÉu quy·∫øt ƒë√£ ƒë√≥ng
        console.log('üìù Creating closed vote...');
        const voteResult = await request.query(`
            INSERT INTO Votes (VoteNumber, Title, Content, CreatedBy, AssigneeType, Status, StartDate, EndDate, AutoClose, IsDeleted)
            OUTPUT INSERTED.VoteID
            VALUES 
            ('CLOSED-001', 'Phi·∫øu Test ƒê√£ ƒê√≥ng', 'ƒê√¢y l√† phi·∫øu bi·ªÉu quy·∫øt test ƒë√£ ƒë√≥ng ƒë·ªÉ ki·ªÉm tra module K·∫øt th√∫c Bi·ªÉu quy·∫øt', 1, 'All', 'Closed', DATEADD(day, -2, GETDATE()), DATEADD(day, -1, GETDATE()), 1, 0);
        `);
        
        const voteId = voteResult.recordset[0].VoteID;
        console.log('‚úÖ Created test vote with ID:', voteId);
        
        // T·∫°o m·ªôt s·ªë k·∫øt qu·∫£ bi·ªÉu quy·∫øt test
        console.log('üìä Creating vote results...');
        await request.query(`
            INSERT INTO VoteResults (VoteID, UserID, Choice, Reason, VotedDate)
            VALUES 
            (${voteId}, 1, 'Agree', 'T√¥i ƒë·ªìng √Ω v·ªõi ƒë·ªÅ xu·∫•t n√†y', DATEADD(hour, -12, GETDATE())),
            (${voteId}, 2, 'Disagree', 'C·∫ßn xem x√©t th√™m', DATEADD(hour, -10, GETDATE())),
            (${voteId}, 3, 'Agree', 'Ph√π h·ª£p v·ªõi t√¨nh h√¨nh hi·ªán t·∫°i', DATEADD(hour, -8, GETDATE()));
        `);
        
        console.log('‚úÖ Created test vote results');
        
        // T·∫°o th√™m m·ªôt phi·∫øu ƒë√£ k·∫øt th√∫c kh√°c
        console.log('üìù Creating second closed vote...');
        const vote2Result = await request.query(`
            INSERT INTO Votes (VoteNumber, Title, Content, CreatedBy, AssigneeType, Status, StartDate, EndDate, AutoClose, IsDeleted)
            OUTPUT INSERTED.VoteID
            VALUES 
            ('CLOSED-002', 'Phi·∫øu Test Th·ª© 2 ƒê√£ ƒê√≥ng', 'Phi·∫øu bi·ªÉu quy·∫øt test th·ª© hai ƒë·ªÉ c√≥ nhi·ªÅu d·ªØ li·ªáu test', 1, 'All', 'Closed', DATEADD(day, -3, GETDATE()), DATEADD(hour, -6, GETDATE()), 1, 0);
        `);
        
        const vote2Id = vote2Result.recordset[0].VoteID;
        console.log('‚úÖ Created second test vote with ID:', vote2Id);
        
        await request.query(`
            INSERT INTO VoteResults (VoteID, UserID, Choice, Reason, VotedDate)
            VALUES 
            (${vote2Id}, 1, 'Disagree', 'Kh√¥ng ph√π h·ª£p', DATEADD(hour, -4, GETDATE())),
            (${vote2Id}, 4, 'Agree', 'T√¥i ·ªßng h·ªô', DATEADD(hour, -3, GETDATE()));
        `);
        
        console.log('üéâ Test data created successfully!');
        
        // Ki·ªÉm tra d·ªØ li·ªáu v·ª´a t·∫°o
        const checkResult = await request.query(`
            SELECT v.VoteID, v.VoteNumber, v.Title, v.Status, COUNT(vr.ResultID) as ResultCount
            FROM Votes v
            LEFT JOIN VoteResults vr ON v.VoteID = vr.VoteID
            WHERE v.Status = 'Closed'
            GROUP BY v.VoteID, v.VoteNumber, v.Title, v.Status
            ORDER BY v.VoteID DESC
        `);
        
        console.log('üìã Closed votes in database:');
        checkResult.recordset.forEach(vote => {
            console.log(`- ID: ${vote.VoteID}, Number: ${vote.VoteNumber}, Results: ${vote.ResultCount}`);
        });
        
        await pool.close();
        
    } catch (error) {
        console.error('‚ùå Error:', error);
    }
}

createTestData();
