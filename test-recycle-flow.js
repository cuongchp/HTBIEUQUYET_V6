const sql = require('mssql');

async function testRecycleBinFlow() {
    console.log('üß™ TESTING FULL RECYCLE BIN FLOW');
    console.log('='.repeat(50));
    
    try {
        const pool = await sql.connect({
            server: 'localhost',
            user: 'sa',
            password: '123456',
            database: 'BIEUQUYET_CHP',
            options: { encrypt: false, trustServerCertificate: true }
        });

        // 1. T·∫°o d·ª± th·∫£o test
        console.log('\nüìù Step 1: T·∫°o d·ª± th·∫£o test...');
        const createResult = await pool.request().query(`
            INSERT INTO Drafts (Title, Content, CreatedBy, CreatedDate, Status, CommentPeriod, ViewerType, IsDeleted)
            OUTPUT inserted.DraftID
            VALUES (N'Test Draft for Soft Delete', N'N·ªôi dung test ƒë·ªÉ x√≥a m·ªÅm', 1, GETDATE(), N'ƒêang m·ªü g√≥p √Ω', 7, 'all', 0)
        `);
        
        const testDraftId = createResult.recordset[0].DraftID;
        console.log(`‚úÖ T·∫°o d·ª± th·∫£o test th√†nh c√¥ng! ID: ${testDraftId}`);

        // 2. Test stored procedure soft delete
        console.log('\nüîÑ Step 2: Test stored procedure soft delete...');
        try {
            await pool.request()
                .input('tableName', sql.NVarChar, 'Drafts')
                .input('recordID', sql.Int, testDraftId)
                .input('deletedBy', sql.Int, 1)
                .query(`
                    EXEC sp_SoftDeleteRecord 
                        @TableName = @tableName,
                        @RecordID = @recordID,
                        @DeletedBy = @deletedBy
                `);
            
            console.log('‚úÖ Stored procedure th√†nh c√¥ng!');
            
        } catch (spError) {
            console.log('‚ùå Stored procedure th·∫•t b·∫°i:', spError.message);
            
            // Manual soft delete
            console.log('üîÑ Th·ª≠ manual soft delete...');
            await pool.request()
                .input('draftID', sql.Int, testDraftId)
                .input('deletedBy', sql.Int, 1)
                .query(`
                    UPDATE Drafts 
                    SET IsDeleted = 1, DeletedDate = GETDATE(), DeletedBy = @deletedBy 
                    WHERE DraftID = @draftID
                `);

            // Insert into RecycleBin
            await pool.request()
                .input('draftID', sql.Int, testDraftId)
                .input('deletedBy', sql.Int, 1)
                .input('recordTitle', sql.NVarChar, 'Test Draft for Soft Delete')
                .query(`
                    INSERT INTO RecycleBin (TableName, RecordID, RecordTitle, DeletedBy, DeletedDate, CanRestore)
                    VALUES ('Drafts', @draftID, @recordTitle, @deletedBy, GETDATE(), 1)
                `);
            
            console.log('‚úÖ Manual soft delete th√†nh c√¥ng!');
        }

        // 3. Verify results
        console.log('\nüîç Step 3: Verify k·∫øt qu·∫£...');
        
        // Check draft is soft deleted
        const draftCheck = await pool.request()
            .input('draftID', sql.Int, testDraftId)
            .query('SELECT IsDeleted, DeletedDate, DeletedBy FROM Drafts WHERE DraftID = @draftID');
        
        if (draftCheck.recordset.length > 0 && draftCheck.recordset[0].IsDeleted) {
            console.log('‚úÖ Draft ƒë√£ ƒë∆∞·ª£c soft delete th√†nh c√¥ng');
            console.log(`   IsDeleted: ${draftCheck.recordset[0].IsDeleted}`);
            console.log(`   DeletedDate: ${draftCheck.recordset[0].DeletedDate}`);
            console.log(`   DeletedBy: ${draftCheck.recordset[0].DeletedBy}`);
        } else {
            console.log('‚ùå Draft kh√¥ng ƒë∆∞·ª£c soft delete');
        }

        // Check RecycleBin
        const recycleCheck = await pool.request()
            .input('draftID', sql.Int, testDraftId)
            .query('SELECT * FROM RecycleBin WHERE TableName = \'Drafts\' AND RecordID = @draftID');
        
        if (recycleCheck.recordset.length > 0) {
            console.log('‚úÖ Record ƒë√£ ƒë∆∞·ª£c th√™m v√†o RecycleBin');
            console.log('   RecycleBin entry:', recycleCheck.recordset[0]);
        } else {
            console.log('‚ùå Record KH√îNG c√≥ trong RecycleBin');
        }

        // 4. Test restore
        console.log('\n‚ôªÔ∏è Step 4: Test kh√¥i ph·ª•c...');
        try {
            await pool.request()
                .input('tableName', sql.NVarChar, 'Drafts')
                .input('recordID', sql.Int, testDraftId)
                .input('restoredBy', sql.Int, 1)
                .query(`
                    EXEC sp_RestoreRecord 
                        @TableName = @tableName,
                        @RecordID = @recordID,
                        @RestoredBy = @restoredBy
                `);
            
            console.log('‚úÖ Kh√¥i ph·ª•c th√†nh c√¥ng!');
            
            // Verify restore
            const restoreCheck = await pool.request()
                .input('draftID', sql.Int, testDraftId)
                .query('SELECT IsDeleted FROM Drafts WHERE DraftID = @draftID');
            
            if (restoreCheck.recordset[0].IsDeleted === false) {
                console.log('‚úÖ Draft ƒë√£ ƒë∆∞·ª£c kh√¥i ph·ª•c: IsDeleted = false');
            }
            
        } catch (restoreError) {
            console.log('‚ùå L·ªói kh√¥i ph·ª•c:', restoreError.message);
        }

        // 5. Cleanup
        console.log('\nüßπ Step 5: Cleanup...');
        await pool.request()
            .input('draftID', sql.Int, testDraftId)
            .query('DELETE FROM Drafts WHERE DraftID = @draftID');
        
        await pool.request()
            .input('draftID', sql.Int, testDraftId)
            .query('DELETE FROM RecycleBin WHERE TableName = \'Drafts\' AND RecordID = @draftID');
        
        console.log('‚úÖ Cleanup ho√†n t·∫•t');

        await pool.close();

        console.log('\nüéâ TEST HO√ÄN T·∫§T!');
        console.log('B√¢y gi·ªù b·∫°n c√≥ th·ªÉ test tr√™n browser:');
        console.log('1. V√†o http://localhost:3000');
        console.log('2. ƒêƒÉng nh·∫≠p admin');
        console.log('3. T·∫°o d·ª± th·∫£o v√† th·ª≠ x√≥a');
        console.log('4. Ki·ªÉm tra th√πng r√°c');

    } catch (error) {
        console.error('‚ùå Test th·∫•t b·∫°i:', error.message);
    }
}

testRecycleBinFlow();
