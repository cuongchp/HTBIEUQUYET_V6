const sql = require('mssql');

async function checkRealData() {
    console.log('üîç KI·ªÇM TRA D·ªÆ LI·ªÜU TH·ª∞C T·∫æ TRONG SQL SERVER');
    console.log('='.repeat(60));
    
    try {
        const pool = await sql.connect({
            server: 'localhost',
            user: 'sa',
            password: '123456',
            database: 'BIEUQUYET_CHP',
            options: { encrypt: false, trustServerCertificate: true }
        });

        // 1. Ki·ªÉm tra T·∫§T C·∫¢ d·ª± th·∫£o trong database
        console.log('\nüìã 1. T·∫§T C·∫¢ D·ª∞ TH·∫¢O TRONG DATABASE:');
        const allDrafts = await pool.request().query(`
            SELECT DraftID, Title, Status, CreatedDate, CreatedBy, IsDeleted, DeletedDate,
                   CommentPeriod, ViewerType,
                   DATEADD(day, ISNULL(CommentPeriod, 7), CreatedDate) as EndDate,
                   CASE 
                     WHEN DATEADD(day, ISNULL(CommentPeriod, 7), CreatedDate) > GETDATE() THEN 'ƒêANG G√ìP √ù'
                     ELSE 'ƒê√É K·∫æT TH√öC'
                   END as TrangThai
            FROM Drafts 
            ORDER BY CreatedDate DESC
        `);
        
        console.log(`T·ªïng s·ªë d·ª± th·∫£o trong DB: ${allDrafts.recordset.length}`);
        allDrafts.recordset.forEach((draft, index) => {
            console.log(`${index + 1}. ID=${draft.DraftID} | "${draft.Title}" | ${draft.TrangThai} | IsDeleted=${draft.IsDeleted}`);
            console.log(`   Created: ${draft.CreatedDate} | EndDate: ${draft.EndDate}`);
        });

        // 2. D·ª± th·∫£o ƒêANG ho·∫°t ƒë·ªông (IsDeleted = 0)
        console.log('\nüìä 2. D·ª∞ TH·∫¢O ƒêANG HO·∫†T ƒê·ªòNG (IsDeleted = 0):');
        const activeDrafts = await pool.request().query(`
            SELECT DraftID, Title, 
                   CASE 
                     WHEN DATEADD(day, ISNULL(CommentPeriod, 7), CreatedDate) > GETDATE() THEN 'ƒêANG G√ìP √ù'
                     ELSE 'ƒê√É K·∫æT TH√öC'
                   END as TrangThai
            FROM Drafts 
            WHERE IsDeleted = 0
            ORDER BY CreatedDate DESC
        `);
        
        console.log(`S·ªë d·ª± th·∫£o ƒëang ho·∫°t ƒë·ªông: ${activeDrafts.recordset.length}`);
        activeDrafts.recordset.forEach((draft, index) => {
            console.log(`${index + 1}. "${draft.Title}" - ${draft.TrangThai}`);
        });

        // 3. Ph√¢n lo·∫°i theo tr·∫°ng th√°i
        console.log('\nüéØ 3. PH√ÇN LO·∫†I THEO TR·∫†NG TH√ÅI:');
        const statusCount = await pool.request().query(`
            SELECT 
                CASE 
                  WHEN DATEADD(day, ISNULL(CommentPeriod, 7), CreatedDate) > GETDATE() THEN 'ƒêANG G√ìP √ù'
                  ELSE 'ƒê√É K·∫æT TH√öC'
                END as TrangThai,
                COUNT(*) as SoLuong
            FROM Drafts 
            WHERE IsDeleted = 0
            GROUP BY 
                CASE 
                  WHEN DATEADD(day, ISNULL(CommentPeriod, 7), CreatedDate) > GETDATE() THEN 'ƒêANG G√ìP √ù'
                  ELSE 'ƒê√É K·∫æT TH√öC'
                END
        `);
        
        statusCount.recordset.forEach(item => {
            console.log(`${item.TrangThai}: ${item.SoLuong} d·ª± th·∫£o`);
        });

        // 4. Ki·ªÉm tra query hi·ªán t·∫°i c·ªßa API
        console.log('\nüîß 4. TEST QUERY API HI·ªÜN T·∫†I:');
        const apiQuery = await pool.request().query(`
            SELECT d.DraftID, d.Title, d.Content, d.CreatedDate, d.Status, 
                   d.CommentPeriod, d.CreatedBy, d.ViewerType,
                   u.FullName as CreatedByName,
                   (SELECT COUNT(*) FROM DraftComments dc WHERE dc.DraftID = d.DraftID) as CommentCount,
                   DATEADD(day, ISNULL(d.CommentPeriod, 7), d.CreatedDate) as CalculatedEndDate,
                   CASE 
                     WHEN DATEADD(day, ISNULL(d.CommentPeriod, 7), d.CreatedDate) > GETDATE() THEN 'active'
                     ELSE 'closed'
                   END as CommentStatus
            FROM Drafts d
            INNER JOIN Users u ON d.CreatedBy = u.UserID
            WHERE d.IsDeleted = 0
            ORDER BY d.CreatedDate DESC
        `);
        
        console.log(`API query tr·∫£ v·ªÅ: ${apiQuery.recordset.length} d·ª± th·∫£o`);

        // 5. Ki·ªÉm tra ng∆∞·ªùi t·∫°o d·ª± th·∫£o
        console.log('\nüë• 5. NG∆Ø·ªúI T·∫†O D·ª∞ TH·∫¢O:');
        const creators = await pool.request().query(`
            SELECT u.FullName, COUNT(*) as SoDuThao
            FROM Drafts d
            INNER JOIN Users u ON d.CreatedBy = u.UserID
            WHERE d.IsDeleted = 0
            GROUP BY u.FullName
            ORDER BY SoDuThao DESC
        `);
        
        creators.recordset.forEach(creator => {
            console.log(`${creator.FullName}: ${creator.SoDuThao} d·ª± th·∫£o`);
        });

        await pool.close();

        console.log('\nüí° K·∫æT LU·∫¨N:');
        if (activeDrafts.recordset.length === 0) {
            console.log('‚ùå KH√îNG C√ì D·ªÆ LI·ªÜU D·ª∞ TH·∫¢O TH·ª∞C T·∫æ TRONG DATABASE!');
            console.log('üîß C·∫ßn t·∫°o d·ªØ li·ªáu m·∫´u ho·∫∑c ki·ªÉm tra d·ªØ li·ªáu g·ªëc');
        } else {
            console.log('‚úÖ C√≥ d·ªØ li·ªáu trong database');
            console.log('üîß C·∫ßn ki·ªÉm tra t·∫°i sao frontend kh√¥ng hi·ªÉn th·ªã');
        }

    } catch (error) {
        console.error('‚ùå L·ªói k·∫øt n·ªëi database:', error.message);
    }
}

checkRealData();
